CREATE DATABASE preserves_db;
USE preserves_db;


CREATE TABLE continents(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE countries(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(40) NOT NULL UNIQUE,
country_code VARCHAR(10) NOT NULL UNIQUE,
continent_id INT NOT NULL,
CONSTRAINT fk_countries_continents
FOREIGN KEY(continent_id) REFERENCES continents(id)
);

CREATE TABLE preserves(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(255) NOT NULL UNIQUE,
latitude DECIMAL(9,6),
longitude DECIMAL(9,6),
area INT,
type VARCHAR(20),
established_on DATE 
);



CREATE TABLE positions(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(40) NOT NULL UNIQUE,
description TEXT,
is_dangerous BOOLEAN NOT NULL


);


CREATE TABLE workers(
id INT PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(40) NOT NULL,
last_name VARCHAR(40) NOT NULL,
age INT,
personal_number VARCHAR (20) NOT NULL UNIQUE,
salary DECIMAL(19,2),
is_armed BOOLEAN NOT NULL,
start_date DATE,
preserve_id INT,
position_id INT,
CONSTRAINT fk_workers_preserves FOREIGN KEY (preserve_id) REFERENCES preserves(id),
CONSTRAINT fk_workers_positions FOREIGN KEY (position_id) REFERENCES positions(id)
);

CREATE TABLE countries_preserves(
country_id INT,
preserve_id INT,
CONSTRAINT fk_countries_preserves_countries FOREIGN KEY (country_id) REFERENCES countries(id),
CONSTRAINT fk_countries_preserves_preserves FOREIGN KEY (preserve_id) REFERENCES preserves(id)


);




-- 2   

INSERT INTO preserves(name,latitude,longitude,area,type,established_on)
SELECT CONCAT(p.name,' ','is in South Hemisphere'),
p.latitude,
p.longitude,
p.area*p.id,
LOWER(p.type),
p.established_on
FROM preserves AS p
WHERE latitude<0;



UPDATE workers 
SET salary=salary+500
WHERE position_id IN(5,8,11,13);

DELETE FROM preserves
WHERE established_on IS NULL;


SELECT * FROM workers;


SELECT CONCAT(first_name,' ',last_name) AS 'full_name',
DATEDIFF('2024-01-01',start_date) AS 'days_of_experience'
FROM workers
HAVING days_of_experience >5 *365
ORDER BY days_of_experience DESC
LIMIT 10;

SELECT w.id, w.first_name,w.last_name,p.name,c.country_code
FROM workers AS w
JOIN preserves AS p ON p.id=w.preserve_id
JOIN countries_preserves AS cp ON p.id=cp.preserve_id
JOIN countries AS c ON cp.country_id=c.id
WHERE w.salary>5000 AND w.age<50
ORDER BY c.country_code;



SELECT p.name,COUNT(w.is_armed) AS 'armed_workers'
FROM preserves AS p
JOIN workers AS w ON p.id=w.preserve_id
WHERE is_armed =1
GROUP BY p.name
ORDER BY armed_workers DESC,
p.name;


SELECT p.name,c.country_code,YEAR(p.established_on) AS 'founded_in'
FROM preserves AS p
JOIN countries_preserves as cp ON p.id=cp.preserve_id
JOIN countries AS c ON cp.country_id=c.id
WHERE MONTH(p.established_on)=5
ORDER BY p.established_on
LIMIT 5;



SELECT id,name,
CASE 
WHEN area<=100 THEN 'very small'
WHEN area>100 AND area<=1000 THEN 'small'
WHEN area>1000 AND area <=10000 THEN 'medium'
WHEN area>10000 AND area<=50000 THEN 'large'
WHEN area>50000 THEN 'very large'
END AS 'category'
FROM preserves
ORDER BY area DESC;


DELIMITER $$

CREATE FUNCTION udf_average_salary_by_position_name(position_name VARCHAR(40))
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    DECLARE avg_salary DECIMAL(10, 2);

    SELECT AVG(w.salary) INTO avg_salary
    FROM workers w
    JOIN positions p ON p.id = w.position_id
    WHERE p.name = position_name;

    RETURN avg_salary;
END $$

DELIMITER ;


DELIMITER $$
CREATE PROCEDURE udp_increase_salaries_by_country(country_name VARCHAR(40))
BEGIN
UPDATE workers AS w
JOIN preserves AS p ON p.id=w.preserve_id
JOIN countries_preserves AS cp ON cp.preserve_id=p.id
JOIN countries AS c ON c.id=cp.country_id
SET salary=salary*1.05
WHERE c.name=country_name;
END $$
DELIMITER ;


